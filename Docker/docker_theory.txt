https://www.youtube.com/watch?v=_uZQtRyF6Eg

ТЕОРИЯ ТЕХНОЛОГИИ DOCKER

Docker - сервис для запуска приложений или автотестов в контейнерах.
Преимущества использования Docker:
    - автотесты запускаются в изолированной среде внутри контейнеров, которые легко запускать на разных ПК под упр. разных ОС;
    - весь софт и зависимости для запуска автотестов устанавливаются внутри контейнеров и нет необходимости устанавливать их на ПК;

На Mac или Windows ПК устанавливается докер-клиент — программа Docker Desktop, которая создает вирт.машину (Linux VM = докер хост),
на которой запустится Docker Daemon — сервис по созданию докер-образов и докер-контейнеров на основании образов.
Все контейнеры запущенные на одном докер-хосте используют его общие ресурсы: RAM, CPU, Network, ядро Linux Kernel, место на жестком диске.
В одном контейнере обычно запускается один процесс и по его завершению Docker автоматически остановит контейнер для экономии ресурсов хоста.
Вышеописанным образом Docker запускается, когда он используется в процессе разработки приложений или для выполнения автотестов.
(Docker также используется и для запуска приложений на проде, но тогда Docker Engine напрямую устанавливается на Linux-сервера,
без создания промежуточной виртуальной машины).

Образы статичны, а контейнеры динамичны.
Image (образ) - статичный слепок, на основе которого можно развернуть множество контейнеров и запускать в них процессы.
За каждым контейнером закрепляется место на жестком диске хоста и контейнер может писать или считывать файлы оттуда.

Образ состоит из слоев (базовый слой и другие), где каждый слой это упакованный набор файлов.
Слоистая структура образов удобна для переиспользования одних и тех же слоев в разных образах, т.к. у нас может быть несколько образов,
у которых некоторые слои пересекаются (кроме базового). Так на хосте не тратятся лишние ресурсы памяти для дублирования слоев.
Образы можно копировать и перемещать, но нельзя редактировать (read-only).
Разные версии образов хранятся в репозиториях на Docker Hub: официальных и репозиториях сообщества разработчиков (открытых и приватных).
Каждая версию образа описывается тегами отражающие название и версию сущности (ЯП, приложение, набор автотестов). Например:
"Python, latest" / "NGINX, 1.8., 1.8.2., 1.8.3" / "NGINX alpine" (alpine - самая маленькая версия образа).