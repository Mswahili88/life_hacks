"""Функция это именованный блок кода, который можно переиспользовать неограниченное количество раз.
Параметры указывают при объявлении функции в виде переменных, в которые при вызове функции на вход передают желаемые
значения (или другие переменные) в качестве аргументов.
Функции полиморфны и сами определяют действия в зависимости от типов данных переданных в аргументах"""


def fun():
    pass


############################


def fun1():
    print('Hello')


fun1()


############################

def fun2(x):
    return x ** 2


print(fun2(5))


############################


def fun3(a, b):
    return a * b


print(fun3(6, 6))


############################


def fun4():
    return list(range(5, 50, 5))


print(fun4())
############################
# print('Пример простой функции принимающей в качестве параметров пользовательский ввод')

# print('Введите первое число: ')
# n1 = int(input())
# print('Введите второе число 2: ')
# n2 = int(input())
#
# def fun5(a, b):
#     return a * b
#
# print(f'Произведение двух чисел равно {fun5(n1, n2)}')

#############################################################
'Позиционные *args и именованные **kwargs аргументы'

print('Примеры передачи позиционных и именованных аргументов при вызове функции')


def fun6(a, b):
    return a // b


print(fun6(8, 2))      # позиционные аргументы - соответствуют очередности позиции параметров в функции
print(fun6(b=2, a=8))        # именованные аргументы - указывают на параметры НЕЗАВИСИМО от их позиций

############################
print('Параметр *args захватывает и распаковывает позиционные аргументы из кортежей')
# Оператор "*" - распаковщик
# a = [1,2,3]
# b = [*a,4,5,6]
# print(b)  >>> [1,2,3,4,5,6]


def fun7(*args):             # после распаковщика имя переменной не имеет значения, "args" - лишь условное обозначение
    return list(args)


print(fun7('Hi', 8, 26, 'body', 177))

############################
print('Параметр **kwargs захватывает именованные аргументы')
# Оператор "**" конвертирует именованные аргументы в словарь при выводе результатов обработки функции


def fun77(**kwargs):
    return kwargs


print(fun77(a=1, b='two', c=3, d='four'))

#############################################################
print('Глобальные и локальные переменные - вне тела функции и внутри них')

x = 10                      # глобальная переменная


def fun8():
    # global x            # переопределение локальной переменной в глобальную
    x = 20                  # одноименная локальная переменная
    return x


print(fun8())               # вывод переменной из функции - локальной или глобальной (после переопределения)
print(x)                    # вывод глобальной переменной

#############################################################
print('Вложенные функции — функции определяемые и вызываемые внутри других функций')


def open_func(n):        # определение внешней функции

    def close_func():    # определение вложенной функции (параметры дублировать не обязательно)
        return n * 2

    print(close_func())  # вызов вложенной функции статичен (аргумент захватывается из внешней функции = замыкание)


open_func(7)             # вызов внешней функции динамичен

#############################################################
print('Lambda функции - анонимные функции, без параметра "def" и имени')

double = lambda x: print(x * 2)         # пример определения лямбда-функции
double(5)                               # вызов лямбда-функции через переменную
