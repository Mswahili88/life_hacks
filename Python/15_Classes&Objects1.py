'Создание класса и экземпляров класса (объектов) на основе конструктора __init__()'


class Person:                           # создание класса
    PI = 3.14                           # пример создания статического атрибута класса (мат. константы пишем заглавными)
    person_count = 0                    # еще пример — создание переменной-аккумулятора

    def __init__ (self, a, b, c, d):    # конструктор по созданию объектов с заданным набором именованных атрибутов
        self.name = a
        self.surname = b
        self.place_of_birth = c
        self.date_of_birth = d
        self.skin_color = "белый"       # атрибут с предопределенным значением (не добавляется в параметры конструктора)
        print(f'Персона {self.name} {self.surname} создана')
        Person.person_count += 1        # при каждом создании объекта инкрементируется переменная-аккумулятор

    def print_info(self, n):            # метод распечатки информации о персоне n-ное кол-во раз (принимает в себя объект первым арг.)
        for i in range(n):
            print(f'Имя и фамилия: {self.name} {self.surname}. Место рождения: '
                  f'{self.place_of_birth}. Дата рождения: {self.date_of_birth}')

    def get_age(self, current_year):    # метод возвращает возраст персоны (точнее кол-во лет с ее рождения)
        print(f'С момента рождения {self.name} {self.surname} прошло {current_year - self.date_of_birth} лет')

    def print_weight(self):             # метод можно вызвать только на объекте p1 - у которого есть этот уник.атрибут
        print(f'Вес персоны: {self.weight} килограмм')  # новый метод для одного из объектов создан ниже (p3.weight = 85)


'Создание объектов класса:'

p1 = Person("Илон", "Маск", "ЮАР", 1971)
p2 = Person("Сергей", "Королев", "Российская Империя", 1907)
p3 = Person("Альберт", "Энштейн", "Германия", 1879)

p1.weight = 85                          # создание уникального атрибута для объекта (вне конструктора)

p3.print_info(2)                        # вызов методов класса на объекте
p2.get_age(2024)
p1.print_weight()

print(Person.PI)                        # получение значения атрибута класса через класс
print(p3.PI)                            # получение значения любого атрибута через объект класса
print(p2.surname)                       # получение значения любого атрибута через объект класса

Person.PI = 3.15                        # перезапись значения атрибута класса ТОЛЬКО через название класса
p3.PI = 4                               # так вместо перезаписи атрибута класса будет создан одноименный атрибут объекта
print(p3.PI)                            # затем через объект уже вызывается атрибут объекта, а не одноименный атрибут класса
