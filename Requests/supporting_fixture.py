"""Использование вспомогательной фикстуры при тестировании"""
# Для чистого тестирования, при котором тестовые функции не будут никак связаны между собой в каждой из них нужно:
# создать нужную нам сущность -> передать ее в http метод (кроме POST)-> удалить сущность после проверки (чтобы не засорять БД).
# Но чтобы при тестировании каждого метода не создавать и не удалять сущность каждый раз, вынесем эти действия в фикстуру.


@pytest.fixture
def obj_id():
    payload = {json_body_with_parameters}
    response = requests.post("URI/objects", json=payload)       # создаем объект (* возможно после зак. скобки нужно добавить .json())
    yield response["id"]                                        # получаем из объекта нужную нам сущность, напр., id (yield == return)
    requests.delete(f'URI/objects/{response["id"]}')            # удаляем сущность


# По этому же принципу и далее создать необходимое количество таких же вспомог. фикстур,
# которые будут возвращать другие необходимые нам значения для передачи их в тестовые функции с методами GET, PUT, PATCH, DELETE.


def test_get_object(obj_id):                                    # вызываем фикстуру - функцию, создающую возвращающую id объекта
    print(obj_id)                                               # убедимся, что мы получили из фикстуры нужную нам сущность
    response = requests.get(f'URI/objects/{obj_id}')            # после проверки сущность удалится согласно постусловию фикстуры
    assert response.ok == True, "Статус-код 400 или выше"
    response_json = response.json()
    assert response_json["id"] == obj_id


# Советы по проверках API
# Проверять стоит все требования к полям (параметрам) запросов (хэдеры, боди и т.д.), напр., на тип вводимых данных, граничные значения.
# По сути нужно убедитьсяЮ что мы, как пользователь, в ответ на передачу любых невалидных данных не можем вызвать 5XX ошибки сервера.
# В идеале все ошибки должны быть с 4XX статус-кодами.
# Так же пытаться обратиться к API тем http методом, с которым она не умеет работать (напр., они не документированы)
#
# (*) Сайты для тренировок работы с API:
# https://petstore.swagger.io
# https://jsonplaceholder.typicode.com/
# https://restful-api.dev/
